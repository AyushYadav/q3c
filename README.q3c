				Q3C

    Author: Sergey Koposov, Sternberg Astronomical Institute
    Email: math@sai.msu.ru 
    http://lnfm1.sai.msu.ru/~math

About Q3C:
To read more about the whole Q3C scheme, look into the paper on Q3C from the
ADASS proceedings. The URL of the paper: 
http://lnfm1.sai.msu.ru/~math/docs/adass_proceedings.pdf
If you will use Q3C you are kindly asked to cite this paper. Also, I 
(Sergey Koposov) will be also happy to hear about any usage of Q3C.

----------------------------------------------------------------------

Small note: To work successfully with Q3C you need to have the version of 
PostgreSQL 8.1 and later. (in principal, the cone search queries will 
probably work even with earlier version, but the 8.1+ version is strongly 
recommended).

----------------------------------------------------------------------

Installation: 

1) make 

2) Do "\i q3c.sql" in postgres 

After that you will have 
several new functions in postgres with the q3c_ prefix.

The useful ones are: 

q3c_ang2ipix -- the function which converts the ra and dec to ipix value

q3c_join -- the function for the spatial join on the sphere

q3c_radial_query -- the function for the radial queries

Examples: 

If you have the table with ra and dec columns

You can first create the spatial index:

my_db# CREATE INDEX q3c_mytable_idx ON mytable (q3c_ang2ipix(ra, dec)); 

And after that it is better to cluster that table using that index. 
(Clustering procedure mainly order the data on the disk according to the 
Q3C spatial index values). If the data is already loaded in the DB ordered by 
some spherical zones or something similar, the clustering step can be ommited.

my_db# CLUSTER q3c_mytable_idx ON my_table;

Now you should do the last step -- analyze your table:

my_db# ANALYZE my_table;

Now the power of Q3C is available for you!!! :) 

To perform the query around ra0 = 11 and dec0 = 12 with radius0 = 0.1 
from the table mytable you can do:
 
my_db# SELECT * FROM mytable WHERE q3c_radial_query(ra, dec, 11, 12, 0.1);


The join example:

Assuming that we have a huge table "table2" with already created ipix index
and with ra and dec columns and the smaller one "table1" with ra and dec 
columns.

If we want now to join "table1" with "table2" with error circle with the size
0.001 degrees, we do:

my_table# SELECT * FROM table1 AS a, table2 AS b WHERE
		q3c_join(a.ra, a.dec, b.ra, b.dec, 0.001) 

If every object in the table1 have his own error circle (like with X-ray data
for example) (suppose that the radius of that circle is the column "err"),
then you can run the query:

my_table# SELECT * FROM table1 AS a, table2 AS b WHERE
		q3c_join(a.ra, a.dec, b.ra, b.dec, a.err);


The example with polygon query:

To query everything in the polygon ((0,0),(1,0),(1,1),(0,1)) ):

my_table# SELECT * FROM mytable WHERE
		q3c_poly_query(ra, dec, '{0, 0, 1, 0, 1, 1, 0, 1}');

